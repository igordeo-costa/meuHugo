labs(x = "p-valor", y = "Densidade")
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img1.png", width = 1000, height = 600, units = "px")
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.05, y = 0.2), color = "red", size = 1) +
theme_classic() +
labs(x = "p-valor", y = "Densidade")
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img1.png", width = 1000, height = 600, units = "px")
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.05, y = 0.2), color = "red", size = 2) +
theme_classic() +
labs(x = "p-valor", y = "Densidade")
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img1.png", width = 1000, height = 600, units = "px")
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.05, y = 0.2), color = "red", size = 2) +
theme_classic() +
labs(x = "p-valor", y = "Densidade") +
theme(text = element_text(10))
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img1.png", width = 1000, height = 600, units = "px")
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.05, y = 0.2), color = "red", size = 2) +
theme_classic() +
labs(x = "p-valor", y = "Densidade") +
theme(text = element_text(size = 10))
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img1.png", width = 1000, height = 600, units = "px")
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.05, y = 0.2), color = "red", size = 2) +
theme_classic() +
labs(x = "p-valor", y = "Densidade") +
theme(text = element_text(size = 2))
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img1.png", width = 1000, height = 600, units = "px")
poder.paired <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < 0.05) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = 0.05, y = 0.2), color = "red", size = 2) +
theme_classic() +
labs(x = "p-valor", y = "Densidade") +
theme(text = element_text(size = 5))
}
poder.paired(n = 30,
mu1 = 150,
mudiff = 0,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img1.png", width = 1000, height = 600, units = "px")
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 1), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 1), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-3, +4), breaks = seq(from = -2, to =4, by =1)) +
theme_classic()
ggsave("imgX.png", width = 1000, height = 600, units = "px")
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 1), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 1), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-4, +4), breaks = seq(from = -2, to =4, by =1)) +
theme_classic()
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 1), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 1), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-4, +5), breaks = seq(from = -2, to =4, by =1)) +
theme_classic()
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 1), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 1), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-4, +5), breaks = seq(from = -4, to =5, by =1)) +
theme_classic()
ggsave("imgX.png", width = 1000, height = 600, units = "px")
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 0.25), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 0.25), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-1, 2), breaks = seq(from = -1, to = 2, by = 1)) +
theme_classic()
ggsave("imgY.png", width = 1000, height = 600, units = "px")
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 0.25), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 0.25), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-1, 2), breaks = seq(from = -1, to = 2, by = 0.25)) +
theme_classic()
ggsave("imgY.png", width = 1000, height = 600, units = "px")
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 0.25), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 0.25), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-1, 2), breaks = seq(from = -1, to = 2, by = 0.5)) +
theme_classic()
ggsave("imgY.png", width = 1000, height = 600, units = "px")
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 0, sd = 0.25), color = "orange") +
geom_vline(aes(xintercept = 0), color = "orange", linetype = "dashed", alpha = 0.4) +
stat_function(fun = dnorm, n = 1000, args = list(mean = 1, sd = 0.25), color = "red") +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", alpha = 0.4) +
ylab("") + xlab("") +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(limits = c(-1, 2), breaks = seq(from = -1, to = 2, by = 1)) +
theme_classic()
ggsave("imgY.png", width = 1000, height = 600, units = "px")
poder.paired(n = 30,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img2.png", width = 1000, height = 600, units = "px")
poder.paired(n = 30,
mu1 = 150,
mudiff = 40,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img3.png", width = 1000, height = 600, units = "px")
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img4.png", width = 1000, height = 600, units = "px")
poder.paired(n = 60,
mu1 = 150,
mudiff = 20,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000)
ggsave("img5.png", width = 1000, height = 600, units = "px")
poder.paired(n = 60,
mu1 = 150,
mudiff = 20,
sigma1 = 80,
sigma2 = 80,
rho12 = 0.3,
nsims = 1000)
ggsave("img6.png", width = 1000, height = 600, units = "px")
poder.paired(n = 10,
mu1 = 150,
mudiff = 20,
sigma1 = 80,
sigma2 = 80,
rho12 = 0.3,
nsims = 1000)
ggsave("img7.png", width = 1000, height = 600, units = "px")
poder.paired2 <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims, alpha){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < alpha) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_segment(aes(x = 0.05, xend = alpha, y = 0.35, yend = 0.35),
color = "grey", arrow = arrow(length = unit(0.03, "npc"))) +
geom_vline(aes(xintercept = alpha), color = "blue", linetype = "dashed") +
geom_text(data = poder, aes(label = poder, x = alpha*1.5, y = 0.2), color = "blue", size = 2) +
theme_classic() +
labs(x = "p-valor", y = "Density") +
theme(text = element_text(size = 5))
}
poder.paired2(n = 50,
mu1 = 150,
mudiff = 10,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000,
alpha = 0.1)
ggsave("img8.png", width = 1000, height = 600, units = "px")
poder.paired2(n = 10,
mu1 = 150,
mudiff = 10,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000,
alpha = 0.01)
ggsave("img9.png", width = 1000, height = 600, units = "px")
poder.paired2(n = 50,
mu1 = 150,
mudiff = 10,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000,
alpha = 0.01)
ggsave("img9.png", width = 1000, height = 600, units = "px")
poder.paired2 <- function(n, mu1, mudiff, sigma1, sigma2, rho12, nsims, alpha){
nsims = nsims
# vetor vazio para armazenar os valores de p
pvalor <- c()
for(i in 1:nsims){
n = n
mu1 = mu1
mudiff = mudiff
sigma1 = sigma1
sigma2 = sigma2
rho12 = rho12
mu2 <- mu1 + mudiff # define a média da segunda condição
# Definir a matriz de covariância
cov12 <- rho12 * sigma1 * sigma2
vcov <- matrix(c(sigma1^2, cov12,
cov12, sigma2^2), nrow=2, byrow=T)
# Realizandoo procedimento de amostragem
head(Y <- rmvnorm(n, c(mu1, mu2), vcov))
Y1 <- Y[, 1]
Y2 <- Y[, 2]
test <- t.test(Y2, Y1, paired = T)
pvalor <- c(pvalor, test$p.value)
}
dados <- as.data.frame(pvalor)
poder <- dados %>%
summarise(poder = sum(pvalor < alpha) / nsims)
ggplot() +
geom_density(data = dados, aes(x = pvalor), fill = "orange", color = "orange", alpha = 0.4) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
geom_segment(aes(x = 0.05, xend = alpha, y = 0.35, yend = 0.35),
color = "grey", arrow = arrow(length = unit(0.03, "npc"))) +
geom_vline(aes(xintercept = alpha), color = "blue", linetype = "dashed") +
#geom_text(data = poder, aes(label = poder, x = alpha*1.5, y = 0.2), color = "blue", size = 2) +
theme_classic() +
labs(x = "p-valor", y = "Density") +
theme(text = element_text(size = 5))
}
poder.paired2(n = 50,
mu1 = 150,
mudiff = 10,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000,
alpha = 0.01)
ggsave("img9.png", width = 1000, height = 600, units = "px")
poder.paired2(n = 50,
mu1 = 150,
mudiff = 10,
sigma1 = 40,
sigma2 = 40,
rho12 = 0.3,
nsims = 1000,
alpha = 0.1)
ggsave("img8.png", width = 1000, height = 600, units = "px")
